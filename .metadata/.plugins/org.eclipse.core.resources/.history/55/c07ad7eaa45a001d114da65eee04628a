package com.nitesh.springdemo.aspect;

import java.util.logging.Logger;

import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.annotation.AfterReturning;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.aspectj.lang.annotation.Pointcut;
import org.springframework.stereotype.Component;

@Aspect
@Component
public class CRMLoggingAspect {

	public Logger myLogger = Logger.getLogger(getClass().getName());
	
	@Pointcut("execution(* com.nitesh.springdemo.controller.*.*(..))")
	private void forControllerPackage() {
		
	}
	
	@Pointcut("execution(* com.nitesh.springdemo.service.*.*(..))")
	private void forServicePackage() {
		
	}
	
	@Pointcut("execution(* com.nitesh.springdemo.dao.*.*(..))")
	private void forDaoPackage() {
		
	}
	
	@Pointcut("forControllerPackage() || forServicePackage() || forDaoPackage()")
	private void forAppFlow() {
		
	}
	
	@Before("forAppFlow()")
	private void before(JoinPoint joinPoint) {
		
		String method = joinPoint.getSignature().toShortString();
		
		myLogger.info("@before method calling :===> "+method);
		
		
		Object[] args = joinPoint.getArgs();
		
		for(Object temp : args) {
			myLogger.info("==========> argument : "+temp);
		}
	}
	
	@AfterReturning(pointcut = "forAppFlow()",returning = "result")
	public void afterReturning(JoinPoint joinPoint,Object result) {
		String method = joinPoint.getSignature().toShortString();
		
		myLogger.info("=======> @afterReturning method calling :::  "+method);
		
	}
}
