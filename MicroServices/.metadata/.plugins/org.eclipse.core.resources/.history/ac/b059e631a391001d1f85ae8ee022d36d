package com.nitesh.stayIn.controller;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseCookie;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.nitesh.stayIn.entity.User;
import com.nitesh.stayIn.entity.UserDetails;
import com.nitesh.stayIn.exception.SuccessResponse;
import com.nitesh.stayIn.request.SignUpRequest;
import com.nitesh.stayIn.service.UserService;
import com.nitesh.stayIn.utils.JwtUtils;

@CrossOrigin
@RestController
public class AuthController {

	@Autowired
	private UserService userService;

	@Autowired
	private PasswordEncoder passwordEncoder;

	@Autowired
	private JwtUtils jwtUtils;

	@GetMapping("/")
	public ResponseEntity<?> logintest() {
		return ResponseEntity.ok("Login successfull");
	}

	@PostMapping("/login")
	public ResponseEntity<?> login(@RequestBody User user) throws Exception {
		User createJwtToken = userService.createJwtToken(user);
		
		if(createJwtToken != null) {
		ResponseCookie jwtCookie = jwtUtils.generateJwtCookie(createJwtToken.getUserToken());

//		return ResponseEntity.ok(new SuccessResponse(HttpStatus.OK.value(), "Logging successfull!",
//				System.currentTimeMillis(), createJwtToken));
		return ResponseEntity.ok().header(HttpHeaders.SET_COOKIE, jwtCookie.toString())
				.header(HttpHeaders.AUTHORIZATION, createJwtToken.getUserToken()).body(new SuccessResponse(
						HttpStatus.OK.value(), "Logging successfull!", System.currentTimeMillis(), userService.findAllUserDetailsByUserId(createJwtToken.getUserId())));
		}
		else {
			
			return ResponseEntity.status(401).body(new SuccessResponse(HttpStatus.UNAUTHORIZED.value(),"User Not Active!",System.currentTimeMillis(),null));
		}
	}

	@PostMapping("/logout")
	public ResponseEntity<?> logoutPage(HttpServletRequest request, HttpServletResponse response) {
		Authentication auth = SecurityContextHolder.getContext().getAuthentication();

		if (auth != null) {

			UsernamePasswordAuthenticationToken usernamePasswordAuthenticationToken = new UsernamePasswordAuthenticationToken(
					null, null, null);
			SecurityContextHolder.getContext().setAuthentication(null);

			ResponseCookie cookie = jwtUtils.getCleanJwtCookie();
			return ResponseEntity.ok().header(HttpHeaders.SET_COOKIE, cookie.toString()).body(new SuccessResponse(
					HttpStatus.OK.value(), "Logout successfull!", System.currentTimeMillis(), null));
//			 new SecurityContextLogoutHandler().logout(request, response,usernamePasswordAuthenticationToken);

		}
		return ResponseEntity.ok(
				new SuccessResponse(HttpStatus.OK.value(), "Logout successfull!", System.currentTimeMillis(), null));
	}

	@PostMapping("/register")
	public ResponseEntity<?> register(@RequestBody com.nitesh.stayIn.entity.User user) {

		System.out.println(user);
		if (userService.findByUsername(user.getUsername()) != null) {
			return ResponseEntity.badRequest()
					.body(new SuccessResponse(HttpStatus.BAD_REQUEST.value(), "Error: Username is already taken!",
							System.currentTimeMillis(), userService.findByUsername(user.getUsername())));
		}

		user.setPassword(passwordEncoder.encode(user.getPassword()));

		if (user.getUserType().equals("ROLE_A")) {
			user.setUserStatus("A");
		} else if (user.getUserType().equals("ROLE_O")) {
			user.setUserStatus("V");
		} else {
			user.setUserStatus("V");
		}

		userService.saveUser(user);

		return ResponseEntity.status(201).body(new SuccessResponse(HttpStatus.CREATED.value(), "register successfully",
				System.currentTimeMillis(), user));
	}

//	@PostMapping("/registerUser")
//	public ResponseEntity<?> registerUser(@RequestBody UserDetails userDetails) {
//		System.out.println("User Details : " + userDetails);
//		User users = userDetails.getUser();
//
//		System.out.println("User : " + users);
//
//		if (userService.findByUsername(userDetails.getUser().getUsername()) != null) {
//			return ResponseEntity.badRequest()
//					.body(new SuccessResponse(HttpStatus.BAD_REQUEST.value(), "Error: Username is already taken!",
//							System.currentTimeMillis(),
//							userService.findByUsername(userDetails.getUser().getUsername())));
//		}
//
//		userDetails.getUser().setPassword(passwordEncoder.encode(userDetails.getUser().getPassword()));
//
//		if (userDetails.getUser().getUserType().equals("ROLE_A")) {
//			userDetails.getUser().setUserStatus("A");
//		} else if (userDetails.getUser().getUserType().equals("ROLE_O")) {
//			userDetails.getUser().setUserStatus("V");
//		} else {
//			userDetails.getUser().setUserStatus("V");
//		}
//
//		UserDetails registerdUserDetails = userService.registerUserD(userDetails);
//		return ResponseEntity.status(201).body(new SuccessResponse(HttpStatus.CREATED.value(), "register User",
//				System.currentTimeMillis(), registerdUserDetails));
//	}
	
	@PostMapping("/signUp")
	public ResponseEntity<?> registerUser(@Valid @RequestBody SignUpRequest signUpRequest) {
		System.out.println("User Details : " + signUpRequest);
		//User users = userDetails.getUser();

		System.out.println("User : " + signUpRequest);

		if (userService.findByUsername(signUpRequest.getUsername()) != null) {
			return ResponseEntity.badRequest()
					.body(new SuccessResponse(HttpStatus.BAD_REQUEST.value(), "Error: Username is already taken!",
							System.currentTimeMillis(),
							null));
		}
		
		if(userService.findByEmailId(signUpRequest.getEmailId()) != null) {
			return ResponseEntity.badRequest()
					.body(new SuccessResponse(HttpStatus.BAD_REQUEST.value(), "Error: Email Address is already taken!",
							System.currentTimeMillis(),
							null));
		}
		
		if(userService.findByAadharCardNo(signUpRequest.getAadharCardNo()) != null) {
			return ResponseEntity.badRequest()
					.body(new SuccessResponse(HttpStatus.BAD_REQUEST.value(), "Error: Aadhar card is already exists!",
							System.currentTimeMillis(),
							null));
		}

		signUpRequest.setPassword(passwordEncoder.encode(signUpRequest.getPassword()));

		if (signUpRequest.getUserType().equals("ROLE_A")) {
			signUpRequest.setUserStatus("A");
		} else if (signUpRequest.getUserType().equals("ROLE_O")) {
			signUpRequest.setUserStatus("V");
		} else {
			signUpRequest.setUserStatus("V");
		}

		UserDetails registerdUserDetails = userService.registerUserD(signUpRequest);
		return ResponseEntity.status(201).body(new SuccessResponse(HttpStatus.CREATED.value(), "register User",
				System.currentTimeMillis(), registerdUserDetails));
	}

}
